@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@{
    var folderSettings = CurrentSite.GetItem().FolderSettings;
    if (folderSettings == null || Model == null)
    {
        return;
    }
    var seo = Model.Value<SeoVisualizer.SeoValues>(nameof(GlobalPageHeadMetaSetting.HeadTitleAndDescription));
    string url = $"{Context.Request.Scheme}://{Context.Request.Host}";
    string canonical = Model.Url(mode: UrlMode.Absolute); //$"{url}{Context.Request.Path}";
    string sitemap = $"{url}/sitemap.xml";
    var title = GetTitle();
    var description = GetDescription();
    var keywords = GetKeywords();
    var thumbnail = GetThumbnail();

    IHtmlContent GetTitle()
    {
        string? value = seo?.Title;
        if (string.IsNullOrEmpty(value))
        {
            value = Model.Name();
        }
        if (!string.IsNullOrEmpty(folderSettings.Value<string>(nameof(GlobalSiteSettings.SiteSettingsTitleSuffix))))
        {
            value = folderSettings.Value<string>(nameof(GlobalSiteSettings.SiteSettingsTitleSuffix))?.Replace("<titlePage>", value)
            .Replace("<titleSiteName>", CurrentSite.GetItem().FolderSite.Value<SeoVisualizer.SeoValues>(nameof(GlobalPageHeadMetaSetting.HeadTitleAndDescription))?.Title, StringComparison.OrdinalIgnoreCase);
        }
        return Html.Raw(value ?? string.Empty);
    }

    IHtmlContent GetDescription()
    {
        string? value = seo?.Description;
        if (string.IsNullOrEmpty(value))
        {
            value = folderSettings.Value<SeoVisualizer.SeoValues>(nameof(GlobalPageHeadMetaSetting.HeadTitleAndDescription))?.Description;
        }
        return Html.Raw(value ?? string.Empty);
    }

    IHtmlContent GetThumbnail()
    {
        string value = Model.ValueToMediaMobile(nameof(GlobalPageHeadMetaSetting.HeadSocialShareImage));
        if (string.IsNullOrEmpty(value))
        {
            value = folderSettings.ValueToMediaMobile(nameof(GlobalSiteSettings.SiteSettingsLogo));
        }
        return Html.Raw(value);
    }

    IHtmlContent GetKeywords()
    {
        List<string> value = new List<string>(folderSettings.ValueToStringArray(nameof(GlobalPageHeadMetaSetting.HeadKeywords)));
        value.AddRange(Model.ValueToStringArray(nameof(GlobalPageHeadMetaSetting.HeadKeywords)));
        if (value != null && value.Any())
        {
            return Html.Raw(string.Join(",", value.GroupBy(x => x).Select(x => x.First())));
        }
        return Html.Raw(string.Empty);
    }

    IHtmlContent GetSocialFB()
    {
        List<string> value = new List<string>();
        string ogType =!string.IsNullOrEmpty(Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgType))) 
        ? Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgType)) 
        : "website";
        value.Add($"<meta property=\"og:type\" content=\"{ogType}\"/>");
        
        value.Add($@"<meta property=""og:title"" content=""{
                        (!string.IsNullOrEmpty(Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgTitle))) 
                        ? Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgTitle)) 
                        : title)}""/>");

        value.Add($@"<meta property=""og:description"" content=""{
                        (!string.IsNullOrEmpty(Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgDescription))) 
                        ? Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgDescription)) 
                        : description)}""/>");

        value.Add($@"<meta property=""og:image"" content=""{
                        (!string.IsNullOrEmpty(Model.ValueToMediaMobile(nameof(GlobalPageHeadSocialMetaSetting.OgImage))) 
                        ? Model.ValueToMediaMobile(nameof(GlobalPageHeadSocialMetaSetting.OgImage)) 
                        : thumbnail)}""/>");

        if (!string.IsNullOrEmpty(Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.FacebookAppId))))
        {
            value.Add($"<meta property=\"fb:app_id\" content=\"{Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.FacebookAppId))}\"/>");
        }
        value.Add($"<meta property=\"og:url\" content=\"{canonical}\"/>");
        value.Add($"<meta property=\"og:locale\" content=\"{CurrentSite.CurrentCulture.Name}\"/>");
        return Html.Raw(string.Join(Environment.NewLine, value));
    }

    IHtmlContent GetSocialTwitter()
    {
        List<string> value = new List<string>();
        string cardType =!string.IsNullOrEmpty(Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.TwitterCardType))) 
        ? Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.TwitterCardType)) 
        : "summary";
        value.Add($"<meta property=\"twitter:card\" content=\"{cardType}\"/>");
        
        value.Add($@"<meta property=""twitter:title"" content=""{
                        (!string.IsNullOrEmpty(Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgTitle))) 
                        ? Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgTitle)) 
                        : title)}""/>");

        value.Add($@"<meta property=""twitter:description"" content=""{
                        (!string.IsNullOrEmpty(Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgDescription))) 
                        ? Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.OgDescription)) 
                        : description)}""/>");

        value.Add($@"<meta property=""twitter:image"" content=""{
                        (!string.IsNullOrEmpty(Model.ValueToMediaMobile(nameof(GlobalPageHeadSocialMetaSetting.OgImage))) 
                        ? Model.ValueToMediaMobile(nameof(GlobalPageHeadSocialMetaSetting.OgImage)) 
                        : thumbnail)}""/>");

        if (!string.IsNullOrEmpty(Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.TwitterSite))))
        {
            value.Add($"<meta property=\"twitter:site\" content=\"{Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.TwitterSite))}\"/>");
        }
        
        if (!string.IsNullOrEmpty(Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.TwitterImageAlt))))
        {
            value.Add($"<meta property=\"twitter:image:alt\" content=\"{Model.ValueToString(nameof(GlobalPageHeadSocialMetaSetting.TwitterImageAlt))}\"/>");
        }
        return Html.Raw(string.Join(Environment.NewLine, value));
    }
}

<meta charset="utf-8">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1">
<meta http-equiv="X-UA-Compatible" content="IE=edge">

@if (Model.Value<bool>(nameof(GlobalPageSitemapSetting.SitemapStopInternalLinksBeingFollowed)))
{
    <meta name="robots" content="noindex, nofollow, noarchive">
}
else
{
    <meta name="robots" content="index, archive, follow, noodp" />
    <meta name="googlebot" content="index,archive,follow,noodp" />
    <meta name="msnbot" content="all,index,follow" />
    <meta name="revisit-after" content="1 days" />
}

<meta http-equiv="content-language" content="@CurrentSite.CurrentCulture.Name.ToLower()" />

@*<meta name="google" content="nositelinkssearchbox" />*@

<title>@title</title>
<meta name="title" content="@title" />
@if (!string.IsNullOrEmpty(description.ToHtmlString()))
{
    <meta name="description" content="@description" />
}

@if (!string.IsNullOrEmpty(keywords.ToHtmlString()))
{
    <meta name="keywords" content="@keywords" />
}
@GetSocialFB()
@GetSocialTwitter()
@*<link rel="alternate" hreflang="en" href="http://site.com" />*@
<link rel="canonical" href="@canonical" />
<link rel="sitemap" href="@sitemap" />
<link rel="shortcut icon" href="/favicon.ico" />
